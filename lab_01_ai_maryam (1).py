# -*- coding: utf-8 -*-
"""lab_01_AI_maryam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sd9S6JrUtzdlrUlwtQfuQQgfjBuieB6Q
"""



"""activity 1: Arithmetic operation"""

print(1 + 3)
 print(10 / 2)
 print(5 ** 2)

"""activity 2:String Manipulation

"""

print("python" + " basics")
print("AI " * 3)

"""activity 3 : Variables and Data Types"""

fruit = "apple"
print(fruit)
fruit = 17
print(fruit)
x = str(3); y = int(3); z = float(3)
print(type(x), type(y), type(z))

"""activity 4: Lists

"""

mylist = ["apple", 34.5, "banana", 9]
mylist = ["apple", 34.5, "banana", 9]
print("First element:", mylist[0])
print("Last element:", mylist[-1])
print("Sublist from index 1 to 2:", mylist[1:3])
print("Every second element:", mylist[::2])
if "app" in mylist[0]:
 print("Substring 'app' found in the first element.")
 mylist.append("grape")
print("List after appending 'grape':", mylist)
mylist.remove("banana")
print("List after removing 'banana':", mylist)
mylist[1] = 99.9
print("List after updating index 1:", mylist)

"""activity 5:Dictionaries

"""

car = {"brand": "Ford", "model": "Mustang", "year": 1964}
print("Initial dictionary:", car)
print("Model of the car:", car["model"])
car["year"] = 2024
print("After updating 'year':", car)
car["color"] = "red"
print("After adding a new key 'color':", car)
removed_value = car.pop("model")
print("Removed 'model' key with value:", removed_value)
print("Dictionary after pop operation:", car)
last_item = car.popitem()
print("Removed the last inserted item:", last_item)
print("Dictionary after popitem:", car)
print("Get 'brand' safely:", car.get("brand"))
print("Get non-existing key safely (returns None):", car.get("engine"))
if "brand" in car:
 print("'brand' key exists in the dictionary.")
 print("All keys:", car.keys())
print("All values:", car.values())
print("All items (keyâ€“value pairs):", car.items())
car_copy = car.copy()
print("Shallow copy of dictionary:", car_copy)
car.clear()
print("Dictionary after clearing all items:", car)

"""activity 6:  Sets

"""

thisset = {"apple", "banana", "cherry"}
print("Initial set:", thisset) # Sets are unordered, so order may differ
set1 = {"abc", 34, True, 40, "male"}
print("Mixed-type set:", set1)
thisset.add("orange")
print("After adding 'orange':", thisset)
thisset.update(["grape", "mango"])
print("After adding multiple elements:", thisset)
thisset.remove("banana")
print("After removing 'banana':", thisset)
print("After attempting to discard 'papaya' (not present):", thisset)
removed_item = thisset.pop()
print("Removed an arbitrary element:", removed_item)
print("Set after pop operation:", thisset)
print("Is 'apple' in the set?", "apple" in thisset)
union_set = thisset.union(set1)
print("Union of thisset and set1:", union_set)
intersection_set = thisset.intersection(set1)
print("Intersection of thisset and set1:", intersection_set)
difference_set = thisset.difference(set1)
print("Difference (thisset - set1):", difference_set)
copy_set = thisset.copy()
print("Copy of the set:", copy_set)
thisset.clear()
print("Set after clearing all elements:", thisset)

"""activity 7:Tuples


"""

thistuple = ("apple", "banana", "cherry")
print(thistuple[1])

"""activity 8:Conditions and If Statements"""

a, b = 33, 200
if b > a:
 print("b is greater than a")
elif a == b:
 print("a and b are equal")
else:
 print("a is greater than b")

"""activity 9:  Loops"""

for i in range(5):
    print("Number:", i)
for i in range(2, 7):
    print("From 2 to 6:", i)
for i in range(0, 10, 2):
    print("Even number:", i)
for i in range(5, 0, -1):
    print("Countdown:", i)
fruits = ["apple", "banana", "cherry"]
for index in range(len(fruits)):
    print("Index:", index, "Fruit:", fruits[index])
for i in range(10):
    if i % 2 != 0:
        print("Odd number:", i)

"""activity 10: Functions"""

def my_function(fname, lname):
    print("Full name:", fname + " " + lname)
my_function("Emil", "Refsnes")
def kids_function(*kids):
    print("The youngest child is:", kids[2])
kids_function("Emil", "Tobias", "Linus")
def greet_user(name="Guest"):
    print("Hello,", name)
greet_user()
greet_user("Alice")
def describe_pet(**pet_info):
    print("Pet details:")
    for key, value in pet_info.items():
        print(key.capitalize() + ":", value)
describe_pet(type="Dog", name="Buddy", age=5)
def add_numbers(a, b):
    return a + b
result = add_numbers(10, 20)
print("Sum of numbers:", result)

"""exercise 01:
1. Write a program to check if a number is prime.
"""

import math
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
num = int(input("Enter a positive integer: "))
if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")

"""exercise 2:Create a list of 10 numbers and print their average.

"""

numbers = [12, 7, 9, 15, 20, 5, 8, 11, 14, 6]
average = sum(numbers) / len(numbers)
print(f"The average of the numbers is: {average}")

"""exercise 3:Store student names and marks in a dictionary and display the topper"""

students = {
    "Alice": 85,
    "Bob": 92,
    "Charlie": 78,
    "David": 95,
    "Eva": 88
}
topper = max(students, key=students.get)
top_score = students[topper]
print(f"The topper is {topper} with {top_score} marks.")

"""exercise 4: Demonstrate set operations: union, intersection, difference."""

setA = {1, 2, 3, 4, 5}
setB = {4, 5, 6, 7, 8}
union_set = setA.union(setB)
print(f"Union of setA and setB: {union_set}")
intersection_set = setA.intersection(setB)
print(f"Intersection of setA and setB: {intersection_set}")
difference_set = setA.difference(setB)
print(f"Difference of setA and setB (setA - setB): {difference_set}")

"""exercise 5: Write a function to compute factorial using recursion."""

def factorial(n: int) -> int:
    """
    Compute n! (factorial of n) using recursion.

    Args:
        n (int): A non-negative integer.

    Returns:
        int: n!

    Raises:
        ValueError: If n is negative.
        TypeError: If n is not an integer.
    """
    if not isinstance(n, int):
        raise TypeError("n must be an integer")
    if n < 0:
        raise ValueError("n must be a non-negative integer")
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)
if __name__ == "__main__":
    print(factorial(0))   # 1
    print(factorial(5))   # 120
    print(factorial(10))  # 3628800

"""exercise 6:
Use a for loop to print the Fibonacci series up to n terms
"""

def print_fibonacci(n: int) -> None:
    """
    Print the Fibonacci series up to n terms using a for loop.

    Args:
        n (int): Number of terms to print (must be >= 0).

    Raises:
        TypeError: If n is not an integer.
        ValueError: If n is negative.
    """
    if not isinstance(n, int):
        raise TypeError("n must be an integer")
    if n < 0:
        raise ValueError("n must be non-negative")

    a, b = 0, 1
    for i in range(n):
        print(a, end='' if i == n-1 else ' ')
        a, b = b, a + b
    print()
if __name__ == "__main__":
    print_fibonacci(0)   # (prints nothing)
    print_fibonacci(1)   # 0
    print_fibonacci(5)   # 0 1 1 2 3
    print_fibonacci(10)  # 0 1 1 2 3 5 8 13 21 34

"""exercise 7:Read a string and count the number of vowels"""

def count_vowels(text):
    """
    Count the number of vowels in a given string.

    Args:
        text (str): The input string to analyze

    Returns:
        int: The number of vowels found
    """

    vowels = "aeiouAEIOU"

    vowel_count = 0
    for char in text:
        if char in vowels:
            vowel_count += 1

    return vowel_count

def main():
    """Main function to get user input and display results."""
    print("Vowel Counter Program")
    print("-" * 20)

    user_input = input("Enter a string: ")

    vowel_count = count_vowels(user_input)

    print(f"\nString: '{user_input}'")
    print(f"Number of vowels: {vowel_count}")
    vowels_found = []
    for char in user_input:
        if char in "aeiouAEIOU":
            vowels_found.append(char)

    if vowels_found:
        print(f"Vowels found: {', '.join(vowels_found)}")
    else:
        print("No vowels found in the string.")

if __name__ == "__main__":
    main()

"""exercise 8: Create a tuple of numbers and find the maximum and minimum."""

def find_min_max_tuple(numbers_tuple):
    """
    Find the minimum and maximum values in a tuple of numbers.

    Args:
        numbers_tuple (tuple): A tuple containing numbers

    Returns:
        tuple: A tuple containing (minimum, maximum) values
    """
    if not numbers_tuple:
        return None, None

    minimum = min(numbers_tuple)
    maximum = max(numbers_tuple)

    return minimum, maximum

def main():
    """Main function to demonstrate tuple min/max operations."""
    print("Tuple Min/Max Finder")
    print("-" * 20)

    numbers = (45, 12, 78, 23, 56, 89, 34, 67, 91, 15)
    print(f"Original tuple: {numbers}")

    min_val, max_val = find_min_max_tuple(numbers)

    print(f"Minimum value: {min_val}")
    print(f"Maximum value: {max_val}")
    print(f"Range: {max_val - min_val}")

    print("\n" + "="*40)
    print("Create your own tuple:")

    try:
        user_input = input("Enter numbers separated by commas: ")
        user_numbers = tuple(map(float, user_input.split(',')))

        print(f"Your tuple: {user_numbers}")

        min_val, max_val = find_min_max_tuple(user_numbers)
        print(f"Minimum value: {min_val}")
        print(f"Maximum value: {max_val}")
        print(f"Range: {max_val - min_val}")

    except ValueError:
        print("Invalid input! Please enter numbers separated by commas.")
    print("\n" + "="*40)
    print("Additional Examples:")

    examples = [
        (1, 2, 3, 4, 5),
        (-10, -5, 0, 5, 10),
        (3.14, 2.71, 1.41, 0.57),
        (100,),  # Single element tuple
        ()  # Empty tuple
    ]

    for i, example_tuple in enumerate(examples, 1):
        print(f"\nExample {i}: {example_tuple}")
        min_val, max_val = find_min_max_tuple(example_tuple)

        if min_val is not None and max_val is not None:
            print(f"  Min: {min_val}, Max: {max_val}")
        else:
            print("  Empty tuple - no min/max values")

if __name__ == "__main__":
    main()

"""exercise 9:Create a program that asks for user input and reverses the string"""

def reverse_string(text):
    """
    Reverse a given string.

    Args:
        text (str): The input string to reverse

    Returns:
        str: The reversed string
    """
    return text[::-1]

def reverse_string_manual(text):
    """
    Reverse a string using manual iteration (alternative method).

    Args:
        text (str): The input string to reverse

    Returns:
        str: The reversed string
    """
    reversed_text = ""
    for char in text:
        reversed_text = char + reversed_text
    return reversed_text

def main():
    """Main function to get user input and reverse strings."""
    print("String Reverser Program")
    print("-" * 25)

    while True:

        user_input = input("\nEnter a string to reverse (or 'quit' to exit): ")

        if user_input.lower() == 'quit':
            print("Thank you for using the String Reverser!")
            break

        reversed_text = reverse_string(user_input)

        print(f"Original string: '{user_input}'")
        print(f"Reversed string: '{reversed_text}'")
        print(f"Length: {len(user_input)} characters")

        if len(user_input) <= 20:
            print("Character breakdown:")
            for i, char in enumerate(user_input):
                reverse_pos = len(user_input) - 1 - i
                print(f"  Position {i}: '{char}' -> Position {reverse_pos}")
        manual_reversed = reverse_string_manual(user_input)
        print(f"Manual method result: '{manual_reversed}'")
        print(f"Methods match: {reversed_text == manual_reversed}")

def demo_examples():
    """Demonstrate string reversal with various examples."""
    print("\nDemo Examples:")
    print("-" * 15)

    examples = [
        "Hello World",
        "Python Programming",
        "12345",
        "A man a plan a canal Panama",
        "racecar",
        "Was it a car or a cat I saw",
        "!@#$%^&*()",
        "   spaces   "
    ]

    for example in examples:
        reversed_text = reverse_string(example)
        is_palindrome = example.lower().replace(" ", "") == reversed_text.lower().replace(" ", "")

        print(f"'{example}' -> '{reversed_text}'")
        if is_palindrome:
            print("  (This is a palindrome!)")

if __name__ == "__main__":
    demo_examples()
    main()